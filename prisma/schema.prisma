// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../prisma/generated/client"
}

// prisma/schema.prisma

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  USER
  WORKER
  OWNER
}

model User {
  id            String         @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  role          String?
  banned        Boolean?
  banReason     String?
  banExpires    DateTime?
  sessions      Session[]
  accounts      Account[]
  stores        Store[]
  orders        Order[]
  request       Request[]
  measurement   Measurement[]
  complaint     Complaint[]
  workerProfile WorkerProfile?

  @@unique([email])
  @@map("user")
}

model Session {
  id             String   @id
  expiresAt      DateTime
  token          String
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Store {
  id            String          @id @default(cuid())
  name          String
  location      String
  status        Boolean
  rating        Int
  created_at    DateTime
  ownerId       String
  image         String
  requests      Request[]
  products      Product[]
  orders        Order[]
  user          User            @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  workerProfile WorkerProfile[]

  @@unique([ownerId])
  @@map("stores")
}

model Product {
  id          String   @id @default(cuid())
  storeId     String
  name        String
  description String
  price       Float
  type        String
  material    String?
  image       String
  available   Boolean
  created_at  DateTime

  orderItems OrderedItems[]

  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@unique([id, storeId])
  @@map("products")
}

model Order {
  id         String   @id @default(cuid())
  customerId String
  storeId    String
  status     String
  total      Float
  created_at DateTime

  email       String?
  phone       String?
  orderNumber String?
  notes       String?

  orderItems OrderedItems[]

  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@unique([id, customerId])
}

model OrderedItems {
  id        String @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@unique([id])
}

model Request {
  id         String   @id @default(cuid())
  storeId    String
  ownerId    String
  type       String
  status     String
  created_at DateTime

  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@unique([id])
  @@map("requests")
}

model Measurement {
  id     String @id @default(cuid())
  chest  Float
  waist  Float
  hips   Float
  height Float
  userId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId]) // Ensure each user has only one measurement
}

model WorkerProfile {
  id           String @id @default(cuid())
  name         String
  email        String @unique
  phone        String
  gender       String
  age          Int
  role         String
  storeId      String
  userId       String
  workingHours String

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Complaint {
  id          String @id @default(cuid())
  description String
  userId      String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([id])
}
